var suggestions=document.getElementById("suggestions"),search=document.getElementById("search");search!==null&&document.addEventListener("keydown",inputFocus);function inputFocus(e){e.ctrlKey&&e.key==="/"&&(e.preventDefault(),search.focus()),e.key==="Escape"&&(search.blur(),suggestions.classList.add("d-none"))}document.addEventListener("click",function(e){var t=suggestions.contains(e.target);t||suggestions.classList.add("d-none")}),document.addEventListener("keydown",suggestionFocus);function suggestionFocus(n){const s=suggestions.classList.contains("d-none");if(s)return;const e=[...suggestions.querySelectorAll("a")];if(e.length===0)return;const t=e.indexOf(document.activeElement);if(n.key==="ArrowUp"){n.preventDefault();const s=t>0?t-1:0;e[s].focus()}else if(n.key==="ArrowDown"){n.preventDefault();const s=t+1<e.length?t+1:t;e[s].focus()}}(function(){var e=new FlexSearch.Document({tokenize:"forward",cache:100,document:{id:"id",store:["href","title","description"],index:["title","description","content"]}});e.add({id:0,href:"/docs/prologue/introduction/",title:"Introduction",description:"GoIM is set of micro service for providing fast, stable and high performance services, which you can easily deploy and customize.",content:"How to run # 1# run push server 2make run Srv=push 3# run gateway server 4make run Srv=gateway 5# run msg server 6make run Srv=msg Design of GoIM # 整体能力规划 # 客户端如何查找和连接长连接服务 # 客户端如何连接长连接服务，目前我有两个方案各有优缺点，但是还没确定。\n反向代理方案 # 客户端统一入口在 gateway 上，gateway 支持反向代理能力，客户端发起长连接请求时，代理到后端的服务（这里准备使用一致性哈希来确定转发到哪台机器上）\n优点:\n 入口统一，且可以在 gateway 上完成鉴权等操作 后端服务无需暴露 ip，且可任意扩缩容比较安全  缺点：\n gateway 需要承受长连接带来的压力，需要更多的 gateway 来承受大量在线用户的情况  httpdns 方案 # 客户端先通过暴露的域名，去访问 httpdns 服务获取真正后端服务的 ip，然后通过 ip 直接进行长连接\n优点：\n 客户端与长连接服务器直连，减少代理层的压力  缺点：\n 要求暴露后端服务 ip，安全性降低且比较浪费 ip 资源  纯 httpdns # 结合 gateway # 结论 # 最终决定,使用基于 gateway 作为第一入口,再返回长链接服务的方案. 原因如下:\n 可以在 gateway 这一层做初步的校验和分配长链接服务的策略(比如按最小连接数,id 哈希等) 反向代理会使系统更复杂且上层反向代理会有比较大的压力,项目初期不想搞太复杂 对于客户端来说 gateway 就是一切了,之后要加的用户体系都是通过 gateway 暴露出来,入口可以比较收拢.  消息的流转 # IM 数据将在 HBASE 上存储，关系型数据存在 MySQL\n"}),e.add({id:1,href:"/docs/prologue/quick-start/",title:"Quick Start",description:"How to run services.",content:"run # 1# run msg service 2$ make run Srv=msg 3# run gateway service 4$ make run Srv=gateway 5# run push service 6$ make run Srv=push other make command # 1make help 2 3Usage: 4 make \u0026lt;target\u0026gt; 5 6Development 7 vet Run go vet against code. 8 lint Run go lint against code. 9 test Run test against code. 10 11Generate 12 protoc Run protoc command to generate pb code. 13 14Build 15 build build provided server 16 build-all build all apps 17 18Docker 19 docker-build build docker image 20 21Run 22 run run provided server 23 24General 25 help Display this help. "}),e.add({id:2,href:"/docs/prologue/configuration/",title:"Configuration",description:"How to configuration",content:"配置为两份文件分别为 service config 和 registry config\n service config 关注服务启停以及声明周期中需要的各类配置 registry config 关注服务注册相关配置  server config definition # 1// Service 为一个服务的全部配置 2message Service {3 string name = 1;4 string version = 2;5 optional Server http = 3;6 optional Server grpc = 4;7 Log log = 5;8 map\u0026lt;string, string\u0026gt; metadata = 6;9 Redis redis = 7;10 MQ mq = 8;11}1213message Server {14 string scheme = 1;15 string addr = 2;16 int32 port = 3;17}181920enum Level {21 DEBUG = 0;22 INFO = 1;23 WARING = 2;24 ERROR = 3;25 FATAL = 4;26}2728message Log {29 optional string log_path = 1;30 repeated Level level = 2;31}3233message Redis {34 string addr = 1;35 string password = 2;36 int32 max_conns = 3;37 int32 min_idle_conns = 4;38 google.protobuf.Duration dial_timeout = 5;39 google.protobuf.Duration idle_timeout = 6;40}4142message MQ {43 repeated string addr = 1;44 int32 max_retry = 2;45}registry config definition # 1message RegistryInfo {2 repeated string addr = 1;3 string scheme = 2;4 google.protobuf.Duration dial_timeout_sec = 3;5 google.protobuf.Duration dial_keep_alive_time_sec = 4;6 google.protobuf.Duration dial_keep_alive_timeout_sec = 5;7}89message Registry {10 string name = 1;11 oneof reg {12 RegistryInfo consul = 2;13 RegistryInfo etcd = 3;14 }15}"}),e.add({id:3,href:"/docs/help/how-to-update/",title:"How to Update",description:" how to update.\n ",content:" how to update.\n "}),e.add({id:4,href:"/docs/help/troubleshooting/",title:"Troubleshooting",description:"Solutions to common problems.",content:"restart first.\n"}),e.add({id:5,href:"/docs/help/faq/",title:"FAQ",description:"Answers to frequently asked questions.",content:" put FAQ here.\n "}),e.add({id:6,href:"/docs/help/",title:"Help",description:"Help Doks.",content:""}),e.add({id:7,href:"/docs/prologue/",title:"Prologue",description:"Prologue Doks.",content:""}),e.add({id:8,href:"/docs/",title:"Docs",description:"Docs GoIM.",content:""}),search.addEventListener("input",t,!0);function t(){const s=5;var n=this.value,o=e.search(n,{limit:s,enrich:!0});const t=new Map;for(const e of o.flatMap(e=>e.result)){if(t.has(e.doc.href))continue;t.set(e.doc.href,e.doc)}if(suggestions.innerHTML="",suggestions.classList.remove("d-none"),t.size===0&&n){const e=document.createElement("div");e.innerHTML=`No results for "<strong>${n}</strong>"`,e.classList.add("suggestion__no-results"),suggestions.appendChild(e);return}for(const[r,a]of t){const n=document.createElement("div");suggestions.appendChild(n);const e=document.createElement("a");e.href=r,n.appendChild(e);const o=document.createElement("span");o.textContent=a.title,o.classList.add("suggestion__title"),e.appendChild(o);const i=document.createElement("span");if(i.textContent=a.description,i.classList.add("suggestion__description"),e.appendChild(i),suggestions.appendChild(n),suggestions.childElementCount==s)break}}})()